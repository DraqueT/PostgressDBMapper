/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sql.db.mapper;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author DThompson
 */
public class MainInterface extends javax.swing.JFrame {

    DatabaseReader reader;

    /**
     * Creates new form MainInterface
     */
    public MainInterface() {
        initComponents();
        cmbFromTable.removeAllItems();
        cmbToTable.removeAllItems();
        cmbDelCheckDrop.removeAllItems();
    }
    
    private void populateTableComboBoxes() {
        cmbDelCheckDrop.removeAllItems();
        reader.getStoredTableNames().forEach((tableName) -> {
            cmbDelCheckDrop.addItem(tableName);
            cmbFromTable.addItem(tableName);
            cmbToTable.addItem(tableName);
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        txtHost = new javax.swing.JTextField();
        txtUser = new javax.swing.JTextField();
        txtPass = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        cmbDelCheckDrop = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        treDepend = new javax.swing.JTree();
        jPanel3 = new javax.swing.JPanel();
        cmbFromTable = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbToTable = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        chkBackwardSearch = new javax.swing.JCheckBox();
        txtMaxDepth = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtPathOutput = new javax.swing.JTextPane();
        chkSimplePath = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtHost.setText("localhost:5432/sheep_oltp");
        txtHost.setToolTipText("host, port, DB");

        txtUser.setText("sheep_oltp");
        txtUser.setToolTipText("DB username");

        txtPass.setToolTipText("DB pass");

        jButton1.setText("Pull Database Info");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtOutput.setColumns(20);
        txtOutput.setRows(5);
        jScrollPane1.setViewportView(txtOutput);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtHost)
            .addComponent(txtUser)
            .addComponent(txtPass)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(txtHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Setup", jPanel1);

        cmbDelCheckDrop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton2.setText("Check Dependencies");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        treDepend.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane2.setViewportView(treDepend);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbDelCheckDrop, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(0, 361, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(cmbDelCheckDrop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Dependency Chart", jPanel2);

        cmbFromTable.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("FROM:");

        jLabel2.setText("TO:");

        cmbToTable.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton3.setText("Get Path");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        chkBackwardSearch.setText("Backward Key Searches");

        jLabel3.setText("Max Depth");

        jScrollPane3.setViewportView(txtPathOutput);

        chkSimplePath.setText("Simple Path");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cmbToTable, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cmbFromTable, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(chkBackwardSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkSimplePath)
                .addGap(18, 18, 18)
                .addComponent(txtMaxDepth, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jButton3))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbFromTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbToTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton3)
                        .addComponent(jLabel3)
                        .addComponent(txtMaxDepth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(chkBackwardSearch)
                        .addComponent(chkSimplePath)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Table to Table Path", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        
        jButton1.setText("Working...");
        jButton1.setEnabled(false);
        txtOutput.setText("");
        
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                try {
                    reader = DatabaseReader.create(txtHost.getText(), txtUser.getText(), txtPass.getText(), txtOutput);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(rootPane, "Error: " + e.getLocalizedMessage());
                }
                
                jButton1.setText("Pull Database Info");
                jButton1.setEnabled(true);
                JOptionPane.showMessageDialog(rootPane, "Done!");
                populateTableComboBoxes();
                return null;
            }
        };
        
        worker.execute();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //txtOutput.setText(reader.printDependencies(cmbDelCheckDrop.getSelectedItem().toString()));
        treDepend.setRootVisible(false);
        treDepend.setModel(new DefaultTreeModel(reader.getDependancyTree(cmbDelCheckDrop.getSelectedItem().toString())));
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int maxDepth = 0;
        try {
            maxDepth = Integer.parseInt(txtMaxDepth.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, "Max depth must be an int value.");
        }
        
        if (maxDepth > 0) {
            List<List<String>> results = reader.getPathsToTable(cmbFromTable.getSelectedItem().toString(), 
                    cmbToTable.getSelectedItem().toString(), maxDepth, chkBackwardSearch.isSelected());
            if (chkSimplePath.isSelected()) {
                String pathText = "";
                int lineNum = 0;
                for (List<String> result : results) {
                    lineNum++;
                    String curLine = lineNum + ") ";

                    for (String table : result) {
                        curLine += "> " + table + " -";
                    }

                    pathText += (curLine + "\n");
                }

                txtPathOutput.setText(pathText.equals("") ? "No Paths of depth " 
                        + maxDepth + " or less." : pathText);
            } else {
                txtPathOutput.setText(getPathTexts(results));
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Max depth must be greater than 0.");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private String getPathTexts(List<List<String>> allPaths) {
        String ret = "";
        int lineCount = 0;
        
        for (List<String> path : allPaths) {
            lineCount++;
            ret += "Path: " + lineCount + "\n" + getSinglePathText(path);
        }
        
        return ret.equals("") ? "No paths found of given depth." : ret;
    }
    
    private String getSinglePathText(List<String> path) {
        String ret = "";
        
        for (int i = 0; i < path.size() - 1; i++) {
            TableObject curTable = reader.getTable(path.get(i));
            TableObject nextTable = reader.getTable(path.get(i + 1));
            
            TableKeyForeign forwardLink 
                    = curTable.getForeignKeyByForeignTable(nextTable.getName());
            TableKeyForeign backwardLink 
                    = nextTable.getForeignKeyByForeignTable(curTable.getName());
            
            if (forwardLink != null) {
                ret += "\t" + forwardLink.getLocalTable() + "." 
                        + forwardLink.getLocalKeyValues().get(0) + " -> "
                        + forwardLink.getForeignTable() + "."
                        + forwardLink.getForeignKeyValues().get(0) + "\n";
            } else if (backwardLink != null) {
                ret += "\t" + backwardLink.getForeignTable() + "."
                        + backwardLink.getForeignKeyValues().get(0) + " -> "
                        + backwardLink.getLocalTable() + "."
                        +  backwardLink.getLocalKeyValues().get(0) + "\n";
            } else {
                ret += "-MISSING KEY-";
            }
        }
        
        return ret;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainInterface().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkBackwardSearch;
    private javax.swing.JCheckBox chkSimplePath;
    private javax.swing.JComboBox<String> cmbDelCheckDrop;
    private javax.swing.JComboBox<String> cmbFromTable;
    private javax.swing.JComboBox<String> cmbToTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTree treDepend;
    private javax.swing.JTextField txtHost;
    private javax.swing.JTextField txtMaxDepth;
    private javax.swing.JTextArea txtOutput;
    private javax.swing.JTextField txtPass;
    private javax.swing.JTextPane txtPathOutput;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables
}
